# -*- coding: utf-8 -*-
#Uncomment for use with Pythonista on iOS:
#import console
def convert():
	#HTML
	c('"', "&quot;")
	c("&", "&amp;")
	c("<", "&lt;")
	c(">", "&gt;")
	#ISO 8859-1
	c("¡", "&iexcl;")
	c("¢", "&cent;")
	c("£", "&pound;")
	c("¤", "&curren;")
	c("¥", "&yen;")
	c("¦", "&brvbar;")
	c("§", "&sect;")
	c("¨", "&uml;")
	c("©", "&copy;")
	c("(c)", "&copy;")
	c("(C)", "&copy;")
	c("ª", "&ordf;")
	c("«", "&laquo;")
	c("¬", "&not;")
	c("®", "&reg;")
	c("(r)", "&reg;")
	c("(R)", "&reg;")
	c("¯", "&macr;")
	c("°", "&deg;")
	c("±", "&plusmn;")
	c("²", "&sup2;")
	c("³", "&sup3;")
	c("´", "&acute;")
	c("µ", "&micro;")
	c("¶", "&para;")
	c("·", "&middot;")
	c("¸", "&cedil;")
	c("¹", "&sup1;")
	c("º", "&ordm;")
	c("»", "&raquo;")
	c("¼", "&frac14;")
	c("½", "&frac12;")
	c("¾", "&frac34;")
	c("¿", "&iquest;")
	c("À", "&Agrave;")
	c("Á", "&Aacute;")
	c("Â", "&Acirc;")
	c("Ã", "&Atilde;")
	c("Ä", "&Auml;")
	c("Å", "&Aring;")
	c("Æ", "&AElig;")
	c("Ç", "&Ccedil;")
	c("È", "&Egrave;")
	c("É", "&Eacute;")
	c("Ê", "&Ecirc;")
	c("Ë", "&Euml;")
	c("Ì", "&Igrave;")
	c("Í", "&Iacute;")
	c("Î", "&Icirc;")
	c("Ï", "&Iuml;")
	c("Ð", "&ETH;")
	c("Ñ", "&Ntilde;")
	c("Ò", "&Ograve;")
	c("Ó", "&Oacute;")
	c("Ô", "&Ocirc;")
	c("Õ", "&Otilde;")
	c("Ö", "&Ouml;")
	c("×", "&times;")
	c("Ø", "&Oslash;")
	c("Ù", "&Ugrave;")
	c("Ú", "&Uacute;")
	c("Û", "&Ucirc;")
	c("Ü", "&Uuml;")
	c("Ý", "&Yacute;")
	c("Þ", "&THORN;")
	c("ß", "&szlig;")
	c("à", "&agrave;")
	c("á", "&aacute;")
	c("â", "&acirc;")
	c("ã", "&atilde;")
	c("ä", "&auml;")
	c("å", "&aring;")
	c("æ", "&aelig;")
	c("ç", "&ccedil;")
	c("è", "&egrave;")
	c("é", "&eacute;")
	c("ê", "&ecirc;")
	c("ë", "&euml;")
	c("ì", "&igrave;")
	c("í", "&iacute;")
	c("î", "&icirc;")
	c("ð", "&eth;")
	c("ñ", "&ntilde;")
	c("ò", "&ograve;")
	c("ó", "&oacute;")
	c("ô", "&ocirc;")
	c("õ", "&otilde;")
	c("ö", "&ouml;")
	c("÷", "&divide;")
	c("ø", "&oslash;")
	c("ù", "&ugrave;")
	c("ú", "&uacute;")
	c("û", "&ucirc;")
	c("ü", "&uuml;")
	c("ý", "&yacute;")
	c("þ", "&thorn;")
	c("ÿ", "&yuml;")
	#Greek letters	
	c("Α", "&Alpha;")
	c("α", "&alpha;")
	c("Β", "&Beta;")
	c("β", "&beta;")
	c("Γ", "&Gamma;")
	c("γ", "&gamma;")
	c("Δ", "&Delta;")
	c("δ", "&delta;")
	c("Ε", "&Epsilon;")
	c("ε", "&epsilon;")
	c("Ζ", "&Zeta;")
	c("ζ", "&zeta;")
	c("Η", "&Eta;")
	c("η", "&eta;")
	c("Θ", "&Theta;")
	c("θ", "&theta;")
	c("Ι", "&Iota;")
	c("ι", "&iota;")
	c("Κ", "&Kappa;")
	c("κ", "&kappa;")
	c("Λ", "&Lambda;")
	c("λ", "&lambda;")
	c("Μ", "&Mu;")
	c("μ", "&mu;")
	c("Ν", "&Nu;")
	c("ν", "&nu;")
	c("Ξ", "&Xi;")
	c("ξ", "&xi;")
	c("Ο", "&Omicron;")
	c("ο", "&omicron;")
	c("Π", "&Pi;")
	c("π", "&pi;")
	c("Ρ", "&Rho;")
	c("ρ", "&rho;")
	c("Σ", "&Sigma;")
	c("ς", "&sigmaf;")
	c("σ", "&sigma;")
	c("Τ", "&Tau;")
	c("τ", "&tau;")
	c("Υ", "&Upsilon;")
	c("υ", "&upsilon;")
	c("Φ", "&Phi;")
	c("φ", "&phi;")
	c("Χ", "&Chi;")
	c("χ", "&chi;")
	c("Ψ", "&Psi;")
	c("ψ", "&psi;")
	c("Ω", "&Omega;")
	c("ω", "&omega;")
	c("ϑ", "&thetasym;")
	c("ϒ", "&upsih;")
	c("ϖ", "&piv;")
	#Mathematical symbols
	c("∀", "&forall;")
	c("∂", "&part;")
	c("∃", "&exist;")
	c("∅", "&empty;")
	c("∇", "&nabla;")
	c("∈", "&isin;")
	c("∉", "&notin;")
	c("∋", "&ni;")
	c("∏", "&prod;")
	c("∑", "&sum;")
	c("−", "&minus;")
	c("∗", "&lowast;")
	c("√", "&radic;")
	c("∝", "&prop;")
	c("∞", "&infin;")
	c("∠", "&ang;")
	c("∧", "&and;")
	c("∨", "&or;")
	c("∩", "&cap;")
	c("∪", "&cup;")
	c("∫", "&int;")
	c("∴", "&there4;")
	c("∼", "&sim;")
	c("≅", "&cong;")
	c("≈", "&asymp;")
	c("≠", "&ne;")
	c("≡", "&equiv;")
	c("≤", "&le;")
	c("≥", "&ge;")
	c("⊂", "&sub;")
	c("⊃", "&sup;")
	c("⊄", "&nsub;")
	c("⊆", "&sube;")
	c("⊇", "&supe;")
	c("⊕", "&oplus;")
	c("⊗", "&otimes;")
	c("⊥", "&perp;")
	c("⋅", "&sdot;")
	c("◊", "&loz;")
	#Technical symbols
	c("⌈", "&lceil;")
	c("⌉", "&rceil;")
	c("⌊", "&lfloor;")
	c("⌋", "&rfloor;")
	c("⟨", "&lang;")
	c("⟩", "&rang;")
	#Arrow icons
	c("←", "&larr;")
	c("↑", "&uarr;")
	c("→", "&rarr;")
	c("↓", "&darr;")
	c("↔", "&harr;")
	c("↵", "&crarr;")
	c("⇐", "&lArr;")
	c("⇑", "&uArr;")
	c("⇒", "&rArr;")
	c("⇓", "&dArr;")
	c("⇔", "&hArr;")
	#Various symbols
	c("•", "&bull;")
	c("′", "&prime;")
	c("″", "&Prime;")
	c("‾", "&oline;")
	c("⁄", "&frasl;")
	c("℘", "&weierp;")
	c("ℑ", "&image;")
	c("ℜ", "&real;")
	c("™", "&trade;")
	c("(TM)", "&trade;")
	c("(tm)", "&trade;")
	c("€", "&euro;")
	c("ℵ", "&alefsym;")
	c("♠", "&spades;")
	c("♣", "&clubs;")
	c("♥", "&hearts;")
	c("♦", "&diams;")
	#Extended latin characters
	c("Œ", "&OElig;")
	c("œ", "&oelig;")
	c("Š", "&Scaron;")
	c("š", "&scaron;")
	c("ƒ", "&fnof;")
	#Characters for punctuation
	c("–", "&ndash;")
	c("—", "&mdash;")
	c("‘", "&lsquo;")
	c("’", "&rsquo;")
	c("‚", "&sbquo;")
	c("“", "&ldquo;")
	c("”", "&rdquo;")
	c("„", "&bdquo;")
	c("†", "&dagger;")
	c("‡", "&Dagger;")
	c("…", "&hellip;")
	c("‰", "&permil;")
	c("‹", "&lsaquo;")
	c("›", "&rsaquo;")
	#Characters for diacritics
	c("ˆ", "&circ;")
	c("˜", "&tilde;")
print("Characters: http://de.selfhtml.org/html/referenz/zeichen.htm")
print("Script: Paul-Vincent Roll")
print("Please enter a text!")
text=input("-> ").decode('utf-8')
#Uncomment for use with Pythonista on iOS:
#console.clear()
#converter
def c(original, html):
	global text
	text=text.replace(original.decode('utf-8'), html)
convert()
print(("Converted text:\n" + text))

